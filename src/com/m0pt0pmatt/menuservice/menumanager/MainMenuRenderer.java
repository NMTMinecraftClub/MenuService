package com.m0pt0pmatt.menuservice.menumanager;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import com.m0pt0pmatt.menuservice.MenuServicePlugin;
import com.m0pt0pmatt.menuservice.api.Action;
import com.m0pt0pmatt.menuservice.api.ActionEvent;
import com.m0pt0pmatt.menuservice.api.ActionListener;
import com.m0pt0pmatt.menuservice.api.Menu;
import com.m0pt0pmatt.menuservice.api.MenuInstance;
import com.m0pt0pmatt.menuservice.api.MenuService;
import com.m0pt0pmatt.menuservice.api.Renderer;
import com.m0pt0pmatt.menuservice.renderers.InventoryRenderer;

/**
 * The MainMenuRenderer is a custom Renderer for the Main Menu for the MenuManager
 * @author mbroomfield
 *
 */
@SuppressWarnings("unused")
public class MainMenuRenderer extends InventoryRenderer implements Renderer, Listener{
	
	/**
	 * Creates a MainMenuRenderer
	 * @param menuService
	 * @param plugin
	 */
	public MainMenuRenderer(MenuService menuService, MenuServicePlugin plugin) {
		super(menuService, plugin);
	}
	
	/**
	 * Renders the Main Menu for the player.
	 * The MainMenu displays all of the currently loaded menus to the player.
	 * The player can also perform commands through the MainMenu.
	 * @param menuInstance the MenuInstance to render
	 * @param playerName the name of the player
	 */
	@Override
	public void renderPlayer(MenuInstance menuInstance, String playerName) {
		
		//First, call the InventoryRenderer to create the inventory
		super.renderPlayer(menuInstance, playerName);
		
		//Grab all of the currently loaded menus
		List<Menu> menus = getMenuService().getMenus();
		
		//used to place the menus accordingly
		int y = 1;
		int x = 0;
		
		//Grab the inventory generated by the InventoryRenderer
		Inventory inv = (Inventory) menuInstance.getParameter("inventory");
		
		//Menu locations need to be kept track of and added as a parameter to the MenuInstance
		Map<Integer, Menu> menuSpots = new HashMap<Integer, Menu>();
		
		//For every loaded menu
		for (Menu menu: menus){
			
			//make sure the menu does not belong to the menu manager
			if (!MenuManager.menus.containsValue(menu)){
				
				//create an itemstack
				ItemStack item = new ItemStack(Material.WOOL);
				ItemMeta meta = item.getItemMeta();
				meta.setDisplayName(menu.getName());
				item.setItemMeta(meta);
				inv.setItem(MenuManager.getIndex(x, y), item);
				
				//store the location of the menu
				menuSpots.put(MenuManager.getIndex(x, y), menu);
				
				//increment inventory location
				x++;
				if (x == 9){
					x = 0;
					y++;
				}
			}	
		}
		
		//add the menuSpots to the instance
		menuInstance.addParameter("menuSpots", menuSpots);
		
		//keep track of the player for bookkeeping
		getPlayers().put(playerName, menuInstance);
	}
	
	/**
	 * Returns the name of the Renderer.
	 * No two Renderers can share the same name
	 * @return the name of the Renderer
	 */
	@Override
	public String getName() {
		return "MenuService-MenuManager-MainMenu";
	}
	
	/**
	 * Handles when a player interacts with the Main Menu
	 * @param event
	 */
	@EventHandler
	@Override
	public void inventoryClick(InventoryClickEvent event){	
		
		//get the playerName
		String playerName = event.getWhoClicked().getName();
		
		//check if the player was viewing the menu
		if (!(getPlayers().containsKey(playerName))){
			return;
		}
		
		//cancel the event
		event.setCancelled(true);
		
		
		if (event.getRawSlot() >= 54 || event.getRawSlot() < 0){
			return;
		}
		
		//get the instance
		MenuInstance instance = getPlayers().get(playerName);
		
		//get the spot which was clicked and add it to the instance
		int spot = event.getSlot();
		instance.addParameter(playerName + ":" + "slot", spot);
		
		if (spot >= 0 && spot < 9){
			
			//player clicked a command
			activateListeners(instance, spot, playerName, "leftClick");
		} else if (spot == MenuManager.getIndex(0, 8)){
			
			//player clicked the left button
			activateListeners(instance, MainMenuButtons.MAIN_LEFTBUTTON.getType(), playerName, "leftClick");
		} else if (spot == MenuManager.getIndex(8, 8)){
			
			//player clicked the right button
			activateListeners(instance, MainMenuButtons.MAIN_RIGHTBUTTON.getType(), playerName, "leftClick");
		} else if (spot == MenuManager.getIndex(7, 8)){
			
			//player clicked the exit button
			activateListeners(instance, MainMenuButtons.MAIN_EXITBUTTON.getType(), playerName, "leftClick");
		} else{
			
			//did the player click a menu?
			if (event.getInventory().getItem(event.getSlot()) != null){
				
				//player clicked a menu
				activateListeners(instance, MainMenuButtons.MAIN_MENUCLICKED.getType(), playerName, "leftClick");
			}
		}

	}
	
	/**
	 * Activate the ActionListeners for the Instance
	 * @param instance
	 * @param tag
	 * @param playerName
	 * @param interaction
	 */
	private void activateListeners(MenuInstance instance, int tag, String playerName, String interaction){
		for (ActionListener listener: instance.getActionListeners().values()){
			ActionEvent event = new ActionEvent(new Action("MenuService", tag, playerName, instance, interaction));
			listener.handleAction(event);
		}
	}

}
